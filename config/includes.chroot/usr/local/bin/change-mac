#!/bin/bash

# Change-MAC - MAC Address Changer Tool for Cyrethium
# Author: root0emir
# Description: CLI tool for changing and reverting MAC addresses using macchanger
# Version: 1.0

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' 

CONFIG_DIR="/var/lib/change-mac"
BACKUP_FILE="$CONFIG_DIR/original_macs.conf"

check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}[ERROR]${NC} This script must be run as root (use sudo)"
        exit 1
    fi
}

check_dependencies() {
    if ! command -v macchanger &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} macchanger is not installed"
        echo -e "${YELLOW}[INFO]${NC} Install it with: apt install macchanger"
        exit 1
    fi
}

setup_directories() {
    mkdir -p "$CONFIG_DIR"
}

show_banner() {
    clear
    echo -e "${WHITE}MAC Address Changer for Cyrethium - Version 1.0${NC}"
    echo ""
}

get_interfaces() {
    ip link show | grep -E '^[0-9]+:' | awk -F': ' '{print $2}' | grep -v lo
}
show_interfaces() {
    echo -e "${YELLOW}[INFO]${NC} Available network interfaces:"
    echo ""
    local counter=1
    
    while IFS= read -r interface; do
        local current_mac=$(ip link show "$interface" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | head -1)
        local status=$(ip link show "$interface" | grep -o 'state [A-Z]*' | cut -d' ' -f2)
        
        echo -e "${YELLOW}[$counter]${NC} Interface: ${GREEN}$interface${NC}"
        echo -e "    MAC Address: ${CYAN}$current_mac${NC}"
        echo -e "    Status: ${BLUE}$status${NC}"
        echo ""
        
        counter=$((counter + 1))
    done < <(get_interfaces)
}

select_interface() {
    local interfaces=()
    while IFS= read -r interface; do
        interfaces+=("$interface")
    done < <(get_interfaces)
    
    if [ ${#interfaces[@]} -eq 0 ]; then
        echo -e "${RED}[ERROR]${NC} No network interfaces found"
        exit 1
    fi
    
    show_interfaces
    
    while true; do
        echo -e "${YELLOW}[INPUT]${NC} Select interface number (1-${#interfaces[@]}) or 'q' to quit: "
        read -r choice
        
        if [[ "$choice" == "q" || "$choice" == "Q" ]]; then
            echo -e "${YELLOW}[INFO]${NC} Exiting..."
            exit 0
        fi
        
        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le ${#interfaces[@]} ]; then
            SELECTED_INTERFACE="${interfaces[$((choice-1))]}"
            echo -e "${GREEN}[SUCCESS]${NC} Selected interface: $SELECTED_INTERFACE"
            break
        else
            echo -e "${RED}[ERROR]${NC} Invalid selection. Please try again."
        fi
    done
}

backup_original_mac() {
    local interface="$1"
    local original_mac=$(ip link show "$interface" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | head -1)
    
    if ! grep -q "^$interface:" "$BACKUP_FILE" 2>/dev/null; then
        echo "$interface:$original_mac" >> "$BACKUP_FILE"
        echo -e "${GREEN}[SUCCESS]${NC} Original MAC address backed up: $original_mac"
    fi
}

change_mac() {
    local interface="$1"
    local mac_type="$2"
    
    echo -e "${YELLOW}[INFO]${NC} Bringing down interface $interface..."
    ip link set dev "$interface" down
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}[ERROR]${NC} Failed to bring down interface $interface"
        return 1
    fi
    
    backup_original_mac "$interface"
    
    echo -e "${YELLOW}[INFO]${NC} Changing MAC address..."
    
    case "$mac_type" in
        "random")
            macchanger -r "$interface"
            ;;
        "random-vendor")
            macchanger -a "$interface"
            ;;
        "custom")
            echo -e "${YELLOW}[INPUT]${NC} Enter new MAC address (format: XX:XX:XX:XX:XX:XX): "
            read -r custom_mac
            
            if [[ ! "$custom_mac" =~ ^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$ ]]; then
                echo -e "${RED}[ERROR]${NC} Invalid MAC address format"
                ip link set dev "$interface" up
                return 1
            fi
            
            macchanger -m "$custom_mac" "$interface"
            ;;
        *)
            echo -e "${RED}[ERROR]${NC} Invalid MAC type"
            ip link set dev "$interface" up
            return 1
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        echo -e "${YELLOW}[INFO]${NC} Bringing up interface $interface..."
        ip link set dev "$interface" up
        
        if [ $? -eq 0 ]; then
            local new_mac=$(ip link show "$interface" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | head -1)
            echo -e "${GREEN}[SUCCESS]${NC} MAC address changed successfully!"
            echo -e "${CYAN}[INFO]${NC} New MAC address: $new_mac"
        else
            echo -e "${RED}[ERROR]${NC} Failed to bring up interface $interface"
            return 1
        fi
    else
        echo -e "${RED}[ERROR]${NC} Failed to change MAC address"
        ip link set dev "$interface" up
        return 1
    fi
}

revert_mac() {
    local interface="$1"
    
    if [ ! -f "$BACKUP_FILE" ]; then
        echo -e "${RED}[ERROR]${NC} No backup file found. Cannot revert MAC address."
        return 1
    fi
    
    local original_mac=$(grep "^$interface:" "$BACKUP_FILE" | cut -d':' -f2-)
    
    if [ -z "$original_mac" ]; then
        echo -e "${RED}[ERROR]${NC} No backup found for interface $interface"
        return 1
    fi
    
    echo -e "${YELLOW}[INFO]${NC} Reverting MAC address for $interface to original: $original_mac"
    
    echo -e "${YELLOW}[INFO]${NC} Bringing down interface $interface..."
    ip link set dev "$interface" down
    
    if [ $? -ne 0 ]; then
        echo -e "${RED}[ERROR]${NC} Failed to bring down interface $interface"
        return 1
    fi
    
    macchanger -m "$original_mac" "$interface"
    
    if [ $? -eq 0 ]; then
        echo -e "${YELLOW}[INFO]${NC} Bringing up interface $interface..."
        ip link set dev "$interface" up
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}[SUCCESS]${NC} MAC address reverted successfully!"
            echo -e "${CYAN}[INFO]${NC} Reverted MAC address: $original_mac"
            
            # Remove from backup file
            sed -i "/^$interface:/d" "$BACKUP_FILE"
        else
            echo -e "${RED}[ERROR]${NC} Failed to bring up interface $interface"
            return 1
        fi
    else
        echo -e "${RED}[ERROR]${NC} Failed to revert MAC address"
        ip link set dev "$interface" up
        return 1
    fi
}

show_status() {
    echo -e "${YELLOW}[INFO]${NC} Current MAC address status:"
    echo ""
    
    while IFS= read -r interface; do
        local current_mac=$(ip link show "$interface" | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | head -1)
        local original_mac="Not backed up"
        
        if [ -f "$BACKUP_FILE" ]; then
            local backup_entry=$(grep "^$interface:" "$BACKUP_FILE" | cut -d':' -f2-)
            if [ -n "$backup_entry" ]; then
                original_mac="$backup_entry"
            fi
        fi
        
        echo -e "${YELLOW}Interface:${NC} ${GREEN}$interface${NC}"
        echo -e "${YELLOW}Current MAC:${NC} ${CYAN}$current_mac${NC}"
        echo -e "${YELLOW}Original MAC:${NC} ${PURPLE}$original_mac${NC}"
        echo ""
    done < <(get_interfaces)
}

show_menu() {
    echo -e "${CYAN}[MAIN MENU]${NC}"
    echo ""
    echo -e "${GREEN}1.${NC} Change MAC Address"
    echo -e "${GREEN}2.${NC} Revert MAC Address"
    echo -e "${GREEN}3.${NC} Show Current Status"
    echo -e "${GREEN}4.${NC} Exit"
    echo ""
}


mac_change_menu() {
    echo -e "${CYAN}[MAC CHANGE OPTIONS]${NC}"
    echo ""
    echo -e "${GREEN}1.${NC} Random MAC Address"
    echo -e "${GREEN}2.${NC} Random MAC (Keep Vendor)"
    echo -e "${GREEN}3.${NC} Custom MAC Address"
    echo -e "${GREEN}4.${NC} Back to Main Menu"
    echo ""
}

main() {
    check_root
    check_dependencies
    setup_directories
    
    show_banner
    
    while true; do
        show_menu
        echo -e "${YELLOW}[INPUT]${NC} Select an option (1-4): "
        read -r choice
        
        case "$choice" in
            1)
                select_interface
                echo ""
                mac_change_menu
                echo -e "${YELLOW}[INPUT]${NC} Select MAC change type (1-4): "
                read -r mac_choice
                
                case "$mac_choice" in
                    1)
                        change_mac "$SELECTED_INTERFACE" "random"
                        ;;
                    2)
                        change_mac "$SELECTED_INTERFACE" "random-vendor"
                        ;;
                    3)
                        change_mac "$SELECTED_INTERFACE" "custom"
                        ;;
                    4)
                        continue
                        ;;
                    *)
                        echo -e "${RED}[ERROR]${NC} Invalid selection"
                        ;;
                esac
                ;;
            2)
                select_interface
                revert_mac "$SELECTED_INTERFACE"
                ;;
            3)
                show_status
                ;;
            4)
                echo -e "${GREEN}[INFO]${NC} Goodbye!"
                exit 0
                ;;
            *)
                echo -e "${RED}[ERROR]${NC} Invalid selection. Please try again."
                ;;
        esac
        
        echo ""
        echo -e "${YELLOW}[INFO]${NC} Press Enter to continue..."
        read -r
        clear
        show_banner
    done
}

main "$@"